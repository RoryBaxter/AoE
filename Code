import random
class Unit(object):
    def __init__(self, moves, Range, attack, defence, costGold, costWheat, turnsToMake, Type):
        self.moves = moves
        self.Range = Range
        self.attack = attack
        self.defence = defence
        self.costGold = costGold
        self.costWheat = costWheat
        self.turnsToMake = turnsToMake
        self.Type = Type
        self.locationX = 0
        self.locationY = 0
        self.hp = 100
Worker = Unit(4, 0, 0, 0, 50, 50, 1, "W")
Archer = Unit(3, 3, 250, 200, 100, 75, 2, "A")
Horse = Unit(7, 1, 250, 200, 75, 100, 2, "H")
Swordsman = Unit(100, 2, 1, 300, 200, 150, 150, 3, "S")
class Building(object):
    def __init__(self, defence, costGold, costWheat, outputGold, outputWheat, Type):
        self.defence = defence
        self.costGold = costGold
        self.costWheat = costWheat
        self.outputGold = outputGold
        self.outputWheat = ouptputWheat
        self.Type = Type
        self.hp = 100
        self.attack = 0
Town = Building(200, 300, 300, 10, 10, "T")
Farm = Building(150, 200, 100, 0, 25, "F")
Mine = Building(150, 100, 200, 25, 0, "M")
def LineMaker(Size):
    row = []
    while Size > 0:
        num = random.randrange(21)
        if num < 16:
            row.append("Plains  ")
        elif num < 18:
            row.append("Gold    ")
        else:
            row.append("Wheat   ")
        Size = Size - 1
    return row
def TerrainGen(Size):
    Map = []
    A = Size
    while A > 0:
        Map.append(LineMaker(Size))
        A = A - 1
    return Map
def LinePrinter(Lot):
    for line in Lot:
        print (line)
def play():
    Row = 0
    Square = 0
    MapSize = input("How big do you want the map to be. The smallest size is 10 ")
    while int(MapSize) < 10:
        MapSize = input("The map has to be bigger than 10 ")
    GameMap = TerrainGen(int(MapSize))
    U1 = Swordsman
    U2 = ""
    U3 = ""
    U4 = ""
    U5 = ""
    U6 = ""
    U7 = ""
    U8 = ""
    U9 = ""
    U10 = ""
    U11 = ""
    U12 = ""
    U13 = ""
    U14 = ""
    U15 = ""
    E1 = ""
    E2 = ""
    E3 = ""
    E4 = ""
    E5 = ""
    E6 = ""
    E7 = ""
    E8 = ""
    E9 = ""
    E10 = ""
    E11 = ""
    E12 = ""
    E13 = ""
    E14 = ""
    E15 = ""
    UnitLocations = ["0,0","","","","","","","","","","","","","","",]
    while True:
        cycle = 1
        for part in UnitLocations:
            if U1.hp < 1:
                UnitLocation[0] = ""
            partNumber = 0
            if len(part) > 1:
                for i in part:
                    if i == ",":
                        part1 = part[0:partNumber]
                        print(part1)
                        part2 = part[partNumber+1:len(part)]
                        print(part2)
                    partNumber = partNumber + 1
                if cycle == 1:
                    U1.locationX = int(part1)
                    U1.locationY = int(part2)
                    GameMap[U1.locationX][U1.locationY] = GameMap[U1.locationX][U1.locationY][0:7] + U1.Type
            cycle = cycle + 1
        LinePrinter(GameMap)
        PointOnMap = input("")
        xn = 0
        for i in PointOnMap:
            if i == ",":
                PointOnMapX = PointOnMap[0:xn]
                PointOnMapY = PointOnMap[xn + 1:len(PointOnMap)]
            xn = xn + 1
        if GameMap[int(PointOnMapX)][int(PointOnMapY)][7] == "S" and GameMap[int(PointOnMapX)][int(PointOnMapY)][6] != "E":
            Action = input("You have a swordsman. What would you like to do with him ")
            if Action.upper() == "M":
                print("Your Swordsman has a total of 4 move points")
                moveDirection = input("How would you like to move: (u)p, (d)own, (l)eft or (r)ight ")
                moveAmount = input("And how far would you like to move your swordsman ")
                while int(moveAmount) > 4:
                    print("Your swordman may only move 4 space")
                    moveAmount = input("How far would you like to move your swordman ")
                if moveDirection[0].lower() == "r":
                    Cycle = 0
                    for co in UnitLocations:
                        if co == PointOnMap:
                            co = str(int(PointOnMapX)) + "," + str(int(PointOnMapY)+int(moveAmount))
                            GameMap[int(PointOnMapX)][int(PointOnMapY)] = GameMap[int(PointOnMapX)][int(PointOnMapY)][0:7] + " "
                            UnitLocations[Cycle] = co
                        Cycle = Cycle + 1
                if moveDirection[0].lower() == "l":
                    Cycle = 0
                    for co in UnitLocations:
                        if co == PointOnMap:
                            co = str(int(PointOnMapX)) + "," + str(int(PointOnMapY)-int(moveAmount))
                            GameMap[int(PointOnMapX)][int(PointOnMapY)] = GameMap[int(PointOnMapX)][int(PointOnMapY)][0:7] + " "
                            UnitLocations[Cycle] = co
                        Cycle = Cycle + 1
                if moveDirection[0].lower() == "u":
                    Cycle = 0
                    for co in UnitLocations:
                        if co == PointOnMap:
                            co = str(int(PointOnMapX)-int(moveAmount)) + "," + str(int(PointOnMapY))
                            GameMap[int(PointOnMapX)][int(PointOnMapY)] = GameMap[int(PointOnMapX)][int(PointOnMapY)][0:7] + " "
                            UnitLocations[Cycle] = co
                        Cycle = Cycle + 1
                if moveDirection[0].lower() == "d":
                    Cycle = 0
                    for co in UnitLocations:
                        if co == PointOnMap:
                            co = str(int(PointOnMapX)+int(moveAmount)) + "," + str(int(PointOnMapY))
                            GameMap[int(PointOnMapX)][int(PointOnMapY)] = GameMap[int(PointOnMapX)][int(PointOnMapY)][0:7] + " "
                            UnitLocations[Cycle] = co
                        Cycle = Cycle + 1
